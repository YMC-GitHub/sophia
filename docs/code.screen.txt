- code(core): use ./geometry.rs 's struct Point
- code(core): use ./utils.rs 's fn handle_result
- code(core): use napi::bindgen_prelude 's all api
- code(core): use napi_derive 's fn napi
- code(core): def struct ImageData
- code(core): use napi(object) macro to label struct ImageData
- code(core): use derive(Debug, Clone) macro to label struct ImageData
- code(core): with data,width,height,pixel_width prop
- code(core): def struct Color
- code(core): use napi(object) macro to label struct Color
- code(core): use derive(Debug, Clone) macro to label struct Color
- code(core): with r,g,b prop
- code(core): def const MAGENTA
- code(core): with r,g,b prop and value (255,0,255)
- code(core): use napi macro to label const MAGENTA
- code(core): def fn read_image_data
- code(core): use napi macro to label it
- code(core): use fn tokio::spawn to make async task
- code(core): use fn utils::handle_result to handle task
- code(core): use fn image::open to open image from path
- code(core): get image with,height,pixel_width,bytes data
- code(core): use struct sophia::ImageData to compose image-data
- code(core): def fn save_image_data
- code(core): use napi macro to label it
- code(core): copy the value of path and image-data
- code(core): use fn tokio::spawn to make async task
- code(core): use fn utils::handle_result to handle task
- code(core): get image with,height,pixel_width,bytes data
- code(core): use struct sophia::ImageData to compose image-data
- code(core): use fn image::RgbaImage::from_raw to transform image-data to buffer
- code(core): use fn image::DynamicImage::save to save image buffer to path
- code(core): def fn image_search
- code(core): use napi macro to label it
- code(core): copy the value of source and target
- code(core): use fn tokio::spawn to make async task
- code(core): use fn utils::handle_result to handle task
- code(core): def fn multiple_image_search
- code(core): use napi macro to label it
- code(core): copy the value of source and target
- code(core): use fn tokio::spawn to make async task
- code(core): use fn utils::handle_result to handle task